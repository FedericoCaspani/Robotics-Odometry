#include "ros/ros.h"
#include <math.h>
#include <time.h>
#include "std_msgs/String.h"
#include "first_project/Odom.h"
#include "nav_msgs/Odometry.h"
#include <tf/transform_broadcaster.h>
#include "first_project/Reset.h"
#include <sstream>

class odomNode{

private:
ros::NodeHandle n;
ros::Subscriber sub;
ros::Publisher pub;
ros::Publisher customPub;
tf::TransformBroadcaster br;
ros::ServiceServer resetter;

double starting_x;
double starting_y;
double starting_th;
double last_x = starting_x;
double last_y = starting_y;
double last_th = starting_th;
double d = 2.8;
ros::Time last_time; //da valutare


public:
        odomNode(){
	last_time = ros::Time::now();
        sub = n.subscribe("/speed_steer", 1000, &odomNode::calculateOdometry, this);
        pub = n.advertise<nav_msgs::Odometry>("/odometry", 1000);
        customPub = n.advertise<first_project::Odom>("/custom_odometry", 1000);
        resetter = n.advertiseService("reset", &odomNode::reset, this);

	n.getParam("/starting_x", starting_x);
        n.getParam("/starting_y", starting_y);
        n.getParam("/starting_th", starting_th);
}

void calculateOdometry(const geometry_msgs::Quaternion& msg){
	double v, alpha, delta_time, w;
	ros::Time current_time = ros::Time::now();

	if (last_time == ros::Time(0)){
		ROS_INFO("current_time is 0");
		last_time = current_time;
		return;
	}

	else{
		ROS_INFO("Calculating Odometry");
		ROS_INFO("current_x: %f, current_y: %f, current_th: %f", last_x, last_y, last_th);

		v = msg.x;
		alpha = msg.y;

		ROS_INFO("v: %f, alpha: %f, d: %f", v, alpha, d);

		w = v * (tan(alpha) / d);

		ROS_INFO("omega: %lf", w);

		ros::Duration delta_time_temp = (current_time - last_time);
		delta_time = delta_time_temp.toSec();

		ROS_INFO("current time: %lf, last time: %lf", current_time.toSec(), last_time.toSec());
		ROS_INFO("delta_time: %lf", delta_time);

		double th = last_th + w * delta_time;
		//double x = starting_x + (v / omega) * (sin(th) - sin(starting_th));
		//double y = starting_y - (v / omega) * (cos(th) - cos(starting_th));
		double x = last_x + v * delta_time * cos(th + (w * delta_time) / 2);
		double y = last_y + v * delta_time * sin(th + (w * delta_time) / 2);

		ROS_INFO("x: %f, y: %f, th: %f", x, y, th);
		
		publishCustomOdometry(x, y, th, current_time);
		publishOdometry(x, y, v, w, th, current_time);
		
		publishTf(x, y, th, current_time);

		last_x = x;
		last_y = y;
		last_th = th;
		last_time = current_time;

		ROS_INFO("\n\n\n");
	}
}

void publishCustomOdometry(double x, double y, double th, ros::Time currentTime){
	first_project::Odom custMsg;
	
	custMsg.x = x;
	custMsg.y = y;
	custMsg.th = th;
	custMsg.timestamp = std::to_string(currentTime.toSec());   //vedere come lo salva

	customPub.publish(custMsg);
	ROS_INFO("custom odometry published");
	
}

void publishOdometry(double x, double y, double v, double w, double th, ros::Time currentTime){
        nav_msgs::Odometry odometry;
        geometry_msgs::Quaternion odometryQuaternion = tf::createQuaternionMsgFromYaw(th);

        //set header
        odometry.header.stamp = currentTime;
        odometry.header.frame_id = "odom";
        //set pose
        odometry.pose.pose.position.x = x;
        odometry.pose.pose.position.y = y;
        odometry.pose.pose.position.z = 0.0;
        odometry.pose.pose.orientation = odometryQuaternion;
        //set velocity
        odometry.child_frame_id = "base_link";
        odometry.twist.twist.linear.x = v * cos(th);
        odometry.twist.twist.linear.y = v * sin(th);
        odometry.twist.twist.angular.z = w;


        //publish odometry
        pub.publish(odometry);
        ROS_INFO("standard odometry published");
}

void publishTf(double x, double y, double th, ros::Time currentTime){	
	tf::Transform transform;

	transform.setOrigin( tf::Vector3(x, y, 0) );
	tf::Quaternion q;
	q.setRPY(0, 0, th);
	transform.setRotation(q);
	br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "odom", "base_link"));  //TODO: controllare "base_link"
	
	ROS_INFO("tf published");
}

bool reset(first_project::Reset::Request &req, first_project::Reset::Response &res){
	last_x = 0.0;
	last_y = 0.0;
	last_th = 0.0;
	
	res.resetted =true;
	ROS_INFO("sending back response: [%B]", res.resetted);

	return true;
}

};

int main(int argc, char **argv)
{
	ros::init(argc, argv, "odom_node");
	ROS_INFO("node started");
	odomNode odomNode;
	ros::spin();
	return 0;
}
